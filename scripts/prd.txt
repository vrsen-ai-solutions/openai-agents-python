Product Requirements Document: Agency Swarm Integration into OpenAI Agents SDK (v1.0.0)

**1. Background & Goal:**

OpenAI has released its Responses API and Agents SDK. To leverage this foundation and streamline maintenance, Agency Swarm will transition from being based on the Assistants API to becoming a fork of the OpenAI Agents SDK. The primary goal is to enhance the SDK fork with Agency Swarm's robust multi-agent orchestration capabilities, making it a production-ready and user-friendly framework while ensuring a smooth migration path for existing Agency Swarm users.

**2. Core Concepts Integration:**

The integration will focus on adding Agency Swarm's multi-agent communication patterns (orchestrator model via an `Agency` class) on top of the Agents SDK's existing features (like `Agent`, `Runner`, `Handoffs`, `@function_tool`).

**3. Key Features & Requirements:**

**3.1. Research & Design Phase:**
    *   **Research - Analyze OpenAI Agents SDK:** Thoroughly analyze `src/agents/` components (`Agent`, `Runner`, `Handoffs`, `tool.py`, `_run_impl.py`) to understand message history, execution flow, and extension points.
    *   **Research - Analyze Agency Swarm Patterns:** Review existing Agency Swarm communication flows (especially `Thread` concept, orchestrator logic in `Agency`) from documentation (`docs-agency-swarm/core-framework/`).
    *   **Design - Thread/History Mechanism:** Design a robust mechanism (potentially a `Thread` class or similar structure) to manage shared conversation history across multiple agent interactions within an `Agency`. Define its API and integration with the `Runner`.
    *   **Design - Orchestrator Pattern:** Define how the `Agency` class will implement the orchestrator pattern, using the history mechanism to route messages and manage control flow between agents. Specify the logic for agent-to-agent communication (e.g., specialized tools).
    *   **Design - Agent Class Modifications:** Detail modifications to the `agents.Agent` class, incorporating required features while maintaining compatibility.
    *   **Design - Agency Class Modifications:** Detail the design of the new `Agency` class, outlining its role, parameters, and methods for orchestration.

**3.2. Agent Class Enhancements (`agents.Agent` fork):**
    *   **Extend `agents.Agent`:** Create a new `agency_swarm.Agent` class inheriting from `agents.Agent`.
    *   **Parameter Compatibility:** Preserve as many parameters from the original Agency Swarm `Agent` as feasible.
    *   **File Handling:**
        *   Retain helper methods for file uploads/vector store management.
        *   Modify file/folder naming convention to embed Vector Store IDs (e.g., `./myfolder_<VECTOR_STORE_ID>`) and File IDs (`myfile_<FILE_ID>.ext`) to avoid duplicates and remove reliance on `settings.json`. Check existence based on base name.
    *   **Tool Integration:**
        *   Keep `ToolFactory` for schema conversion.
        *   Retain methods for loading tools from folders.
        *   Add seamless support for SDK's `@function_tool`.
        *   Update `get_oai_tools` (or equivalent) to handle both formats.
    *   **Remove Assistant API Logic:** Remove all methods related to managing OpenAI Assistants V1/V2 (fetching, updating, `settings.json`).
    *   **New Response Methods:**
        *   Implement `get_response(..., text_only=False)`: Synchronously calls `Runner.run_sync`. Returns the full `agents.Result` object by default, or just the final text output if `text_only=True`.
        *   Implement `get_response_stream(...)`: Calls `Runner.run` for streaming. Yield results in a format compatible with OpenAI's streaming chunks.
    *   **Conversation History:** Determine how to pass/manage conversation history (potentially via the new `Thread`/History mechanism) for continued interactions within `get_response`/`get_response_stream`. *Initial thought on `previous_response_id` postponed in favor of exploring full history management via `Thread`.*
    *   **Response Validation:** Retain `response_validator` functionality.

**3.3. Agency Class (New):**
    *   **Parameter Compatibility:** Define constructor parameters, keeping similarity to original Agency Swarm `Agency` where possible.
    *   **Agent Management:** Manage a collection of `agency_swarm.Agent` instances.
    *   **Orchestration Logic:** Implement the core orchestrator pattern.
    *   **Agency Chart:** Retain the `agency_chart` concept for defining agent relationships and communication paths.
    *   **History Management:** Use the designed `Thread`/History mechanism to manage state and message history between agents involved in an interaction (replacing `agents_and_threads`).
    *   **Communication Tools:**
        *   Adapt `_create_special_tools` / `_create_send_message_tool`.
        *   These tools, when called by an agent, should trigger the `Agency`'s orchestration logic to route the message to the target agent using the shared history mechanism (e.g., calling `target_agent.get_response` with the appropriate history context).
    *   **Agency-Level Response Methods:**
        *   Implement `get_response(..., recipient_agent, text_only=False)`: Initiates an interaction, potentially starting with `recipient_agent`. Manages the multi-agent flow. Returns the final `agents.Result` or text.
        *   Implement `get_response_stream(..., recipient_agent)`: Similar to `get_response` but streams the output chunks from the agents involved.
    *   **Backward Compatibility:** Implement `get_completion` and `get_completion_stream` methods mapping to the new `get_response` methods (excluding deprecated `yield_messages`).
    *   **Demo Functionality:** Re-implement `demo_gradio` and `run_demo`. Refactor the output handling (`MessageOutput` class) to accept and display data in a format closer to the `agents.Result` structure or standard OpenAI message objects, clearly indicating the source agent.

**3.4. Tracing:**
    *   Ensure the SDK's built-in tracing works seamlessly by default for all agent interactions, including those orchestrated by the `Agency`.
    *   Aim for a simple initialization like `agentops.init()` or similar for easy integration with external providers (Logfire, AgentOps, etc.).

**4. Definition of Done:**

*   Agency Swarm (`agency_swarm` package) is successfully refactored as a fork/extension of the `agents` package.
*   Multi-agent orchestration (`Agency`, `Thread`/History) is implemented and functional.
*   Core `Agent` features (file handling, tools, response methods) are working as specified.
*   The framework is stable, well-documented, and includes examples.
*   Tracing is functional and easy to configure.
*   A clear migration guide for users of the previous Agency Swarm version is provided.
